/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        goto_functions {
            bindings = <&to 3>;
            key-positions = <2 3>;
            layers = <0 1 2 3 4 5 6 7>;
        };

        goto_base {
            bindings = <&to 0>;
            key-positions = <15 20>;
            layers = <0 1 2 3 4 5 6 7>;
            timeout-ms = <0>;
        };

        goto_operators {
            bindings = <&to 4>;
            key-positions = <8 9>;
            layers = <0 1 2 3 4 5 6 7>;
        };

        goto_numbers {
            bindings = <&to 3>;
            key-positions = <14 15>;
            layers = <0 1 2 3 4 5 6 7>;
        };

        goto_number_pad {
            bindings = <&to 6>;
            key-positions = <19 20 21>;
            layers = <0 1 2 3 4 5 6 7>;
        };

        goto_brackets {
            bindings = <&to 5>;
            key-positions = <20 21>;
            layers = <0 1 2 3 4 5 6 7>;
        };

        goto_bluetooth {
            bindings = <&to 7>;
            key-positions = <29 5>;
            layers = <0 1 2 3 4 5 6 7>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <40>;
            layers = <0 1 2 3 4 5 6 7>;
        };

        navigation {
            bindings = <&mo 1>;
            key-positions = <36>;
            layers = <0 1 2 3 4 5 6 7>;
        };
    };

    behaviors {
        my_mod_tap: my_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_MOD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans  &my_mod_tap LS(Q) Q  &my_mod_tap LS(W) W  &my_mod_tap LS(E) E  &my_mod_tap LS(R) R  &my_mod_tap LS(T) T    &my_mod_tap LS(Y) Y  &my_mod_tap LS(U) U  &my_mod_tap LS(I) I  &my_mod_tap LS(O) O  &my_mod_tap LS(P) P         &trans
&trans  &my_mod_tap LS(A) A  &my_mod_tap LS(S) S  &my_mod_tap LS(D) D  &my_mod_tap LS(F) F  &my_mod_tap LS(G) G    &my_mod_tap LS(H) H  &my_mod_tap LS(J) J  &my_mod_tap LS(K) K  &my_mod_tap LS(L) L  &my_mod_tap LS(SEMI) SEMI   &trans
&trans  &my_mod_tap LS(Z) Z  &my_mod_tap LS(X) X  &my_mod_tap LS(C) C  &my_mod_tap LS(V) V  &my_mod_tap LS(B) B    &my_mod_tap LS(N) N  &my_mod_tap LS(M) M  &kp LS(KP_COMMA)     &kp KP_DOT           &my_mod_tap LS(FSLH) SLASH  &trans
                                                  &trans               &trans               &trans                 &trans               &trans               &trans
            >;
        };

        navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp ESCAPE  &none      &trans     &trans    &trans  &kp BACKSPACE   &kp UP_ARROW    &kp DELETE     &kp PRINTSCREEN  &trans
&trans  &trans  &kp TAB     &kp LSHFT  &kp LCTRL  &trans    &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT      &kp ENTER        &trans
&trans  &trans  &kp LC(X)   &kp LC(C)  &kp LC(V)  &trans    &trans  &kp HOME        &kp PG_UP       &kp PAGE_DOWN  &kp END          &trans
                            &trans     &trans     &trans    &trans  &trans          &trans
            >;
        };

        functions {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &mt F12 F11
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        number_row {
            bindings = <
&trans  &trans           &trans           &trans           &trans           &trans             &trans           &trans           &trans           &trans           &trans           &trans
&trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_4  &kp KP_NUMBER_5    &kp KP_NUMBER_6  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0  &trans
&trans  &trans           &trans           &trans           &trans           &trans             &trans           &trans           &trans           &trans           &trans           &trans
                                          &trans           &trans           &trans             &trans           &trans           &trans
            >;
        };

        operators {
            bindings = <
&trans     &trans    &trans  &trans    &trans      &trans         &trans     &trans         &trans                   &trans                &trans              &trans
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &mt UNDERSCORE KP_MINUS  &mt KP_PLUS KP_EQUAL  &mt PIPE BACKSLASH  &trans
&trans     &trans    &trans  &trans    &trans      &trans         &trans     &trans         &trans                   &trans                &trans              &trans
                             &trans    &trans      &trans         &trans     &trans         &trans
            >;
        };

        brackets {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mt LEFT_BRACKET KP_LEFT_PARENTHESIS  &mt RIGHT_BRACKET KP_RIGHT_PARENTHESIS  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp LEFT_BRACE                        &kp RIGHT_BRACE                         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp LESS_THAN                         &kp GREATER_THAN                        &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        number_pad {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_7  &mt KP_DIVIDE KP_NUMBER_8  &mt KP_MULTIPLY KP_NUMBER_9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5            &kp KP_NUMBER_6              &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2            &mt DOT KP_NUMBER_3          &trans  &trans
                        &trans  &trans  &trans    &trans  &trans           &kp KP_NUMBER_0
            >;
        };

        bluetooth {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &bt BT_CLR    &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };
    };
};
