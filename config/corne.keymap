/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        toggle_bluetooth {
            bindings = <&tog 5>;
            key-positions = <29 5>;
        };

        toggle_gaming {
            bindings = <&tog 5>;
            key-positions = <2 13 15>;
        };

        Sleep {
            bindings = <&kp C_SLEEP_MODE>;
            key-positions = <19 20 21 40 22>;
        };
    };

    behaviors {
        my_mod_tap: my_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_MOD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alphas {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E  &kp R  &kp T    &kp Y           &kp U      &kp I      &kp O       &kp P          &none
&none  &kp A  &kp S  &kp D  &kp F  &kp G    &kp H           &kp J      &kp K      &kp L       &kp SEMICOLON  &kp APOSTROPHE
&none  &kp Z  &kp X  &kp C  &kp V  &kp B    &kp N           &kp M      &kp COMMA  &kp PERIOD  &kp SLASH      &none
                     &mo 7  &mo 1  &mo 3    &kp LEFT_SHIFT  &kp SPACE  &none
            >;
        };

        navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp ESCAPE  &kp TAB    &none      &none      &none    &kp PG_UP  &kp BACKSPACE  &kp UP    &kp DELETE  &kp INS         &kp PAGE_DOWN
&none  &kp LC(A)   &kp LC(S)  &none      &none      &none    &kp HOME   &kp LEFT       &kp DOWN  &kp RIGHT   &kp LEFT_SHIFT  &kp END
&none  &kp LC(Z)   &kp LC(X)  &kp LC(C)  &kp LC(V)  &none    &none      &kp LEFT_ALT   &none     &kp ENTER   &none           &none
                              &none      &mo 1      &mo 3    &kp LCTRL  &kp SPACE      &none
            >;
        };

        upper_row {
            bindings = <
&none  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7     &kp F8  &kp F9  &kp F10  &my_mod_tap F12 F11
&none  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7     &kp N8  &kp N9  &kp N0   &none
&none  &none   &none   &none   &none   &none     &none   &none      &none   &none   &none    &none
                       &none   &mo 1   &mo 3     &none   &kp SPACE  &none
            >;
        };

        symbols {
            bindings = <
&none  &kp GRAVE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR       &kp CARET    &kp PERCENT    &kp EXCL        &kp ASTERISK  &kp SLASH  &kp BACKSLASH  &kp PIPE
&none  &kp LEFT_BRACE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp RIGHT_BRACE  &none        &kp HASH       &kp MINUS       &kp PLUS      &kp EQUAL  &kp SEMICOLON  &kp APOS
&none  &none           &kp LESS_THAN         &kp GREATER_THAN       &kp AT           &none        &kp AMPERSAND  &kp UNDERSCORE  &kp COMMA     &kp DOT    &kp QUESTION   &none
                                             &none                  &mo 1            &mo 3        &none          &kp SPACE       &none
            >;
        };

        bluetooth {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &none  &none  &none  &none  &none
&none  &none         &none         &none         &none         &none           &none  &none  &none  &none  &none  &none
&none  &none         &none         &bt BT_CLR    &none         &none           &none  &none  &none  &none  &none  &none
                                   &none         &none         &none           &none  &none  &none
            >;
        };

        gaming {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E      &kp R  &kp T    &none  &none      &kp UP    &none      &none  &none
&kp LSHFT  &kp A  &kp S  &kp D      &kp F  &kp G    &none  &kp LEFT   &kp DOWN  &kp RIGHT  &none  &kp ENTER
&kp LCTRL  &kp Z  &kp X  &kp C      &kp V  &kp B    &none  &none      &none     &none      &none  &none
                         &kp SPACE  &mo 6  &none    &none  &kp SPACE  &none
            >;
        };

        gaming_alt {
            bindings = <
&kp ESCAPE  &kp N7  &kp N8  &kp N9     &none  &none    &none  &none           &kp UP_ARROW    &none            &none  &none
&none       &kp N4  &kp N5  &kp N6     &none  &none    &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none  &kp ENTER
&kp N0      &kp N1  &kp N2  &kp N3     &none  &none    &none  &none           &none           &none            &none  &none
                            &kp SPACE  &mo 6  &none    &none  &kp SPACE       &none
            >;
        };

        cursor {
            bindings = <
&none  &none  &none  &none  &none  &none    &msc SCRL_UP    &none           &mmv MOVE_UP    &none            &none  &none
&none  &none  &none  &none  &none  &none    &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &none
&none  &none  &none  &none  &none  &none    &none           &msc SCRL_LEFT  &none           &msc SCRL_RIGHT  &none  &none
                     &mo 7  &none  &none    &mkp LCLK       &mkp RCLK       &mkp MCLK
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        nav+sym_upper {
            if-layers = <1 3>;
            then-layer = <2>;
        };
    };
};
